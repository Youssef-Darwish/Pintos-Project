			+--------------------+
			|        CS 333      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Ahmed Hamdy 	<hamdy10024@gmail.com>
Youssef Darwish <youssefdarwish95@gmail.com>


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


-In thread.c:

static struct list sleeping_list;

List that keeps track of all sleeping threads.


-In thread.h:

struct sleeping_thread_data {
    int64_t wake_up_ticks;
    struct thread *blocked_thread;
    struct list_elem elem;
};

Struct that holds the information of each sleeping thread including 
wake up time.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

In timer_sleep:

1) Call thread_block_time in thread.c
2) thread_block_time calculates the wake_up_time of the current thread,
inserts the the sleeping_thread_data to the sleeping_list ordered by wake_up_time
and by thread priority if wake_up_time is equal.
3) Blocks the current thread

In the timer interrupt handler:

1)Get the begining of the sleeping_list.
2)If wake_up_ticks <= global ticks remove it from the sleeping list and thread is
unblocked.
3)Repeat steps 1-2 until wake_up_ticks>	global timer ticks.


>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?


-Inserting the threads ordered by sleeping time minimizes the time spent when calling
wake_up_thread.
 

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

-Data of each sleeping thread is svaed in new struc (sleeping_thread_data).
struct creation can run preemptively while thread blocking requires disabling interrupts.


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

// TODO

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

-We chose to keep the list sorted to minimize the time spent in the timer
interrupt.This will make the insertion in O(n) but waking threads will take O(m)
where m is awakened threads.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

-In synch.h :
Modifying the struct lock.The following variables are added:

int priority;               /* The highest priority among threads holding the lock*/
struct list_elem elem;      /* Element to hold the lock int the acquired_locks list */

-In thread.h
Modifying the thread struct.The following variables are added:

-struct lock *blocking_lock :
 Used to keep track of the blocking lock and its priority.

-int default_priority;
 Used in thread_set_priority and thread_create.This priority is not affected
 by priority donation.

-struct list donors;
 List of locks acquired by the thread.Used to set the thread's temporary priority
 to the highest priority in the list.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

All synchronization primitives use semaphores in their structures,
and each semaphore has a list of waiters.So by keeping the list
of waiters ordered,we ensure that the highest priority thread is awaken
first.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

Thread tries to acquire the lock,if the lock is held by another thread,
the thread overrides the lock's priority then donates its priority to
the lock holder.If lock holder is blocked on a lock,a new priority donation
starts.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

The lock is released,and its priority is reset.The previous holder
resets its priority to default or the maximum priority of remaining
acquired locks.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

//TODO -----------------------------

The priority data of each thread is not shared with other threads so
no potential races exist.



---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

//TODO
This design minimizes the size of thread struct ; instead of

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In thread.h:

Adding recent_cpu variable to thread struct

In thread.c:

Adding global variable real load_average



---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
  0     0   0   0   63  61  59     A
  4     4   0   0   62  61  59     A
  8     8   0   0   61  61  59     B
 12     8   4   0   61  60  59     A
 16     12  4   0   60  60  59     B
 20     12  8   0   60  59  59     A
 24     16  8   0   59  59  59     C
 28     16  8   4   59  59  58     B
 32     16  12  4   59  58  58     A
 36     20  12  4   58  58  58     C


>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

The value of load average used in recent_cpu update was ambiguous between
the updated and the old value.


>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

//TODO

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

//TODO
>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

//TODO

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
